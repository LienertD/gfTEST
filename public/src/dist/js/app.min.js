(function () {
    "use strict";

    var app = angular.module("geofeelings", ["ngRoute"]);

    app.config(function ($routeProvider) {
        $routeProvider
            .when("/admin", {
                templateUrl: "./controllers/adminController/admin.html"
            }).when("/search", {
                templateUrl: "./controllers/searchController/search.html"
            }).when("/intro", {
                templateUrl: "./controllers/introController/intro.html"
            }).when("/help", {
                templateUrl: "./directives/help.html"
            }).when("/login", {
                templateUrl: "./controllers/loginController/login.html"
            }).when("/register", {
                templateUrl: "./controllers/loginController/register.html"
            }).when("/user", {
                templateUrl: "./controllers/userController/user.html"
            }).when("/user/:param", {
                templateUrl: "./controllers/userController/user.html",
                controller: 'userController'
            }).when("/me", {
                templateUrl: "./controllers/userController/me.html"
            }).when("/event", {
                templateUrl: "./controllers/eventController/event.html"
            }).when("/event/:param", {
                templateUrl: "./controllers/eventController/event.html",
            }).when("/addEvent", {
                templateUrl: "./controllers/eventController/addEvent.html"
            }).when("/intro_shared", {
                templateUrl: "./controllers/introController/intro_shared.html"
            }).otherwise({
                redirectTo: "/intro"
            });
    });

    app.service('sharedProperties', function () {
        var property = 'First';

        return {
            getProperty: function () {
                return property;
            },
            setProperty: function (value) {
                property = value;
            }
        };
    });

})();

/**
 * Created by Jonatan on 6/12/2015.
 */

(function () {
    "use strict";

    var adminController = function ($scope, $location, eventService, shareService, profileService) {
        profileService.getUser(function (err, user) {
            if(!err) {
                if(user.redirect) {
                    $location.path(user.redirect);
                } else {
                    if(user.admin) {
                        eventService.getEvents(function (err, data) {
                            if(!err) {
                                if(data.redirect) {
                                    $location.path(data.redirect);
                                } else {
                                    $scope.eventsAdmin = data;
                                }
                            }
                            else {
                                throw new EventServiceException(err);
                            }
                        });

                        shareService.getAllShares(function (err, data) {
                            if(!err) {
                                if(data.redirect) {
                                    $location.path(data.redirect);
                                } else {
                                    $scope.sharesAdmin = data;
                                }
                            } else {
                                throw new ShareServiceException(err);
                            }
                        });
                    } else {
                        $location.path("/intro");
                    }
                }
            } else {
                throw new ProfileServiceException(err);
            }
        });

        $scope.deleteEvent = function (event) {
            eventService.deleteEvent(event, function(err, data) {
                if(!err) {
                    $scope.eventsAdmin.splice($scope.eventsAdmin.indexOf(event), 1);
                    window.alert(data.message);
                } else {
                    throw new EventServiceException(err);
                }
            });
        };

        $scope.deleteShare = function (share) {
            shareService.deleteShare(share, function(err, data) {
                if(!err) {
                    $scope.sharesAdmin.splice($scope.sharesAdmin.indexOf(share), 1);
                    window.alert(data.message);
                } else {
                    throw new ShareServiceException(err);
                }
            });
        };
    };

    angular.module("geofeelings").controller("adminController", ["$scope", "$location", "eventService", "shareService", "profileService", adminController]);
})();
/**
 * Created by Jonatan on 30/12/2015.
 */

(function () {
    "use strict";

    var addEventController = function ($scope, $location, eventService, profileService) {
        $scope.newEvent = {};
        $scope.errorAddEvent = null;

        profileService.getUser(function(err, user) {
            if(!err) {
                if(user.redirect) {
                    $location.path(user.redirect);
                } else {
                    console.log("testlog"); 
                    $scope.newEvent.authorid = user.id;
                }
            } else {
                throw new ProfileServiceException(err);
            }
        });

        $scope.createEvent = function() {
            $scope.newEvent.address = makeAddress($scope.newEvent.address1, $scope.newEvent.address2);
            eventService.postEvent($scope.newEvent, function (err, data) {
                if(!err) {
                    if(data.redirect) {
                        $location.path(data.redirect);
                    } else if(data.error) {
                        $scope.errorAddEvent = data.error;
                    } else {
                        $location.path("/event/" + data.event._id);
                    }
                } else {
                    if(err === "ZERO_RESULTS") {
                        $scope.errorAddEvent = "No address found! Street & Number and Zip & City are required! Make sure ther is a space between your input and no ,";
                    } else {
                        $scope.errorAddEvent = "Something went wrong, try again later!";
                    }
                }
            });
        };

        var makeAddress = function (address1, address2) {
            return address1 + "," + address2;
        };
    };

    angular.module("geofeelings").controller("addEventController", ["$scope", "$location", "eventService", "profileService", addEventController]);
})();
/**
 * Created by Jonatan on 4/12/2015.
 */


(function () {
    "use strict";

    var eventController = function ($scope, $location, $sce, $routeParams, eventService, shareService, profileService) {
        var eventid = $routeParams.param;
        $scope.newEvent = {};

        eventService.getEventById(eventid, function(err, event) {
            if(!err) {
                $scope.event = event;
                $scope.event.mood = 50;
                $scope.event.eventid = event.id;
                $scope.event.address1 = splitAddress($scope.event.address, 0);
                $scope.event.address2 = splitAddress($scope.event.address, 1);

                if(!$scope.event.eventimage) {
                    $scope.event.eventimage = "http://student.howest.be/jonatan.michiels/geofeelings/assets/event.png";
                }

                if($scope.event.authorid) {
                    profileService.getUser(function(err, user) {
                        if(!err) {
                            $scope.event.userid = user.id;

                            if(user.redirect) {
                                $location.path(user.redirect);
                            } else {
                                return $scope.event.authorid === user.id;
                            }
                        } else {
                            throw new ProfileServiceException(err);
                        }
                    });
                } else {
                    $scope.event.isAuthor = false;
                }

                shareService.getSharesByEventId(event.id, function(err, shares) {
                    if(!err) {
                        if(shares.redirect) {
                            $location.path(shares.redirect);
                        } else {
                            if(shares.length > 0) {
                                $scope.sharesforevent = shares;
                            } else {
                                $scope.noSharesForEvent = "<div>No shares for this event.</div>";
                            }
                        }
                    } else {
                        throw new ShareServiceException(err);
                    }
                });
            } else {
                throw new EventServiceException(err);
            }
        });

        $scope.renderHtml = function(html) {
            return $sce.trustAsHtml(html);
        };

        $scope.postShare = function() {
            $scope.event.time = new Date();
            shareService.postShareAsync($scope.event, function(err, data) {
                if(!err) {
                    if(data.redirect) {
                        $location.path(data.redirect);
                    } else if(data.error) {
                        $scope.error = data.error;
                    } else {
                        $scope.event = data;
                    }
                } else {
                    if(err === "ZERO_RESULTS") {
                        $scope.error = "No address found!";
                    } else {
                        $scope.error = "Something went wrong, try again later!";
                    }
                }
            });
        };

        $scope.updateEvent = function() {
            $scope.event.address = makeAddress($scope.event.address1, $scope.event.address2);
            eventService.updateEvent($scope.event, function(err, data) {
                if(!err) {
                    if(data.redirect) {
                        $location.path(data.redirect);
                    } else if(data.error) {
                        $scope.errorEvent = data.error;
                    } else {
                        $scope.event = data;
                        $scope.event.address1 = splitAddress($scope.event.address, 0);
                        $scope.event.address2 = splitAddress($scope.event.address, 1);
                    }
                } else {
                    if(err === "ZERO_RESULTS") {
                        $scope.errorEvent = "No address found! Street & Number and Zip & City are required! Make sure ther is a space between your input and no komma(,)";
                    } else {
                        $scope.errorEvent = "Something went wrong, try again later!";
                    }
                }
            });
        };

        $scope.convertMood = function(mood) {
            if(mood > 80) {
                return "excited";
            } else if(mood > 60) {
                return "happy";
            } else if(mood > 40) {
                return "common";
            } else if (mood > 20) {
                return "sad";
            } else {
                return "depressive";
            }
        };

        var splitAddress = function (address, part) {
            var split = address.split(",");
            return split[part];
        };

        var makeAddress = function (address1, address2) {
            return address1 + "," + address2;
        };
    };

    angular.module("geofeelings").controller("eventController", ["$scope", "$location", "$sce", "$routeParams", "eventService", "shareService", "profileService", eventController]);
})();
/**
 * Created by Jonatan on 1/12/2015.
 */

(function () {
    "use strict";

    var introController = function ($scope, shareService, $http, $location, profileService, shareVarsBetweenCtrl, googleMapsService) {

        var socket = io.connect(window.location.hostname+":3001");

        //SMILEY TEKENEN
        $scope.sliderValue = 50;
        $scope.moodWord = null;
        var c = document.getElementById("smileyCanvas");
        var ctx = c.getContext("2d");

        var sadRGB = [152, 30, 30];
        var happyRGB = [70, 161, 73];

        //telkens slidervalue verandert gezichtje tekenen
        $scope.$watch("sliderValue", function () {

            ctx.clearRect(0, 0, c.width, c.height); //canvas clearen voor nieuw frame

            var mood = $scope.sliderValue;
            giveMoodWord();
            //offset positie mond
            var offsetX = c.width / 5;
            var offSetY = c.width / 2.14 + (mood / (c.width / 6));

            //variabelen voor beziercurve (= mond)
            var SPx = offsetX;
            var SPy = offSetY + c.width / 3 - (mood * (c.width / 376.66));
            var H1x = offsetX;
            var H1y = offSetY + (mood * (c.width / 250));
            var H2x = offsetX + ((c.width / 300) * 180);
            var H2y = offSetY + (mood * (c.width / 250));
            var EPx = offsetX + (c.width / 1.666);
            var EPy = offSetY + (c.width / 3) - (mood * (c.width / 376.66));

            //hoofd
            ctx.lineWidth = c.width / 60;
            ctx.beginPath();
            ctx.arc((c.width / 2), (c.width / 2), (c.width / 2.07), 0, 2 * Math.PI);
            ctx.fillStyle = "rgb(" + moodColor(0) + "," + moodColor(1) + "," + moodColor(2) + ")";
            ctx.fill();
            ctx.strokeStyle = 'white';
            ctx.stroke();

            //mond

            ctx.lineWidth = c.width / 30;
            ctx.beginPath();
            ctx.moveTo(SPx, SPy);
            ctx.bezierCurveTo(H1x, H1y, H2x, H2y, EPx, EPy);
            //ctx.strokeStyle = 'black';
            ctx.stroke();
            ctx.lineCap = "round";

            //oog links

            ctx.lineWidth = c.width / 60;
            ctx.beginPath();
            ctx.arc(c.width / 3, c.width / 3, c.width / 15, 0, 2 * Math.PI);
            ctx.fillStyle = 'white';
            ctx.fill();
            ctx.stroke();

            //oog rechts
            ctx.beginPath();
            ctx.arc(c.width / 3 * 2, c.width / 3, c.width / 15, 0, 2 * Math.PI);
            ctx.fillStyle = 'white';
            ctx.fill();
            ctx.stroke();
        });

        var moodColor = function (c) {
            //c: R = 0, G = 1, B = 2

            if (sadRGB[c] > happyRGB[c]) {
                return Math.round(sadRGB[c] - ((sadRGB[c] - happyRGB[c]) * ($scope.sliderValue / 100)));
            }
            else {
                return Math.round(sadRGB[c] + ((happyRGB[c] - sadRGB[c]) * ($scope.sliderValue / 100)));
            }

        };

        var moodwords = ["horrible", "really bad", "bad", "okay", "good", "really good", "excellent"];

        var giveMoodWord = function () {
            if ($scope.sliderValue < 5) {
                $scope.moodWord = moodwords[0];
            }
            else if ($scope.sliderValue < 25) {
                $scope.moodWord = moodwords[1];
            }
            else if ($scope.sliderValue < 40) {
                $scope.moodWord = moodwords[2];
            }
            else if ($scope.sliderValue < 60) {
                $scope.moodWord = moodwords[3];
            }
            else if ($scope.sliderValue < 75) {
                $scope.moodWord = moodwords[4];
            }
            else if ($scope.sliderValue < 95) {
                $scope.moodWord = moodwords[5];
            }
            else {
                $scope.moodWord = moodwords[6];
            }
        };

        $http.get('/auth/user').success(function (data) {
            $scope.user = data;
        });
        $scope.sharePosted = false;

        $scope.postShare = function () {

            $scope.sharePosted = true; //zorgt ervoor dat spinnertje begint de draaien

            profileService.getUser(function (err, userData) {
                if (!err) {
                    if (userData.redirect) { //user is nog niet ingelogd bij het sharen
                        navigator.geolocation.getCurrentPosition(function (position) {
                            googleMapsService.convertCoordinatesToAdress(position.coords.latitude, position.coords.longitude, function (err, address) {
                                if (!err) {

                                    var shareAddress;
                                    if (err) {
                                        shareAddress = "";
                                    }
                                    else {
                                        shareAddress = address;
                                    }

                                    var userlessShareData = {
                                        "userid": 0,
                                        "eventid": null,
                                        "time": new Date().toISOString(),
                                        "mood": $scope.sliderValue,
                                        "lat": position.coords.latitude,
                                        "lng": position.coords.longitude,
                                        "address": shareAddress,
                                        "reason": $scope.moodReason
                                    };
                                    shareVarsBetweenCtrl.saveUserlessShare(userlessShareData);
                                }
                                else {
                                    console.log("erroke: " + err);
                                }
                            });
                        });
                        shareVarsBetweenCtrl.setExtraLoginInfo("Please login before posting this share.");
                        $location.path(userData.redirect);

                    } else {
                        navigator.geolocation.getCurrentPosition(function (position) {
                            googleMapsService.convertCoordinatesToAdress(position.coords.latitude, position.coords.longitude, function (err, address) {
                                var shareAddress;
                                if (err) {
                                    shareAddress = "";
                                }
                                else {
                                    shareAddress = address;
                                }

                                var shareData = {
                                    "userid": userData.id,
                                    "eventid": null,
                                    "time": new Date().toISOString(),
                                    "mood": $scope.sliderValue,
                                    "lat": position.coords.latitude,
                                    "lng": position.coords.longitude,
                                    "address": shareAddress,
                                    "reason": $scope.moodReason
                                };

                                shareService.postShareAsync(shareData, function (err, resShareData) {
                                    if (!err) {
                                        socket.emit("sharePosted", resShareData); //uitzenden naar iedereen
                                        shareVarsBetweenCtrl.setProperty(resShareData);
                                        $location.path("/intro_shared");
                                    }
                                    else {
                                        console.log(err);
                                    }
                                });

                            });
                        });
                    }
                } else {
                    console.log("error while getting user: " + err);
                }
            });
        };
    };

    angular.module("geofeelings").controller("introController", ["$scope", "shareService", "$http", "$location", "profileService", "shareVarsBetweenCtrl", "googleMapsService", introController]);
})();
/**
 * Created by Lienert on 21/12/2015.
 */

(function () {
    "use strict";

    var intro_sharedController = function ($scope, shareVarsBetweenCtrl) {
        $scope.infoPostedShare = shareVarsBetweenCtrl.getProperty();
    };
    angular.module("geofeelings").controller("intro_sharedController", ["$scope", "shareVarsBetweenCtrl", intro_sharedController]);
})();
/**
 * Created by Jonatan on 26/11/2015.
 */

(function () {
    "use strict";

    var socket = io.connect(window.location.host+":3001");

    var loginController = function ($scope, $http, $location, shareVarsBetweenCtrl, shareService, profileService) {
        if (shareVarsBetweenCtrl.getExtraLoginInfo()) {
            $scope.extraLoginInfo = shareVarsBetweenCtrl.getExtraLoginInfo();
        }

        var postUserlessShare = function () {
            var shareData = shareVarsBetweenCtrl.returnUserlessShare();
            profileService.getUser(function (err, user) {
                if (!err) {
                    if (user.redirect) {
                        $location.path(user.redirect);
                    } else {
                        shareData.userid = user.id;

                        shareService.postShareAsync(shareData, function (err, resShareData) {
                            if (!err) {
                                shareVarsBetweenCtrl.setExtraLoginInfo("");
                                shareVarsBetweenCtrl.setProperty(resShareData);
                                $location.path("/intro_shared");
                            }
                            else {
                                console.log(err);
                            }
                        }); //post de share met de inlogdata dat hij nu weet
                        shareVarsBetweenCtrl.saveUserlessShare("");
                    }
                } else {
                    console.log("> error profileService: " + err);
                }
            });
        };

        //Moet nog naar een service omgezet worden
        $scope.login = function () {
            $http.post(window.location.hostname+':3000/auth/login', {
                username: $scope.username,
                password: $scope.password
            }).success(function (data) {
                $scope.error = data.error;

                profileService.getUser(function (err, userData) { //zend je id naar de server om te zeggen dat je er bent en welk socketid je hebt
                    if (!err) {
                        if (userData.redirect) {
                            //userid niet logged in, nog toevoegen dat hij zen id stuurt bij inloggen!
                        } else {
                            console.log(userData);
                            socket.emit("loginMessage", userData.id);
                        }
                    } else {
                        console.log("error while getting userid: " + err);
                    }
                });

                if (shareVarsBetweenCtrl.returnUserlessShare() !== undefined && shareVarsBetweenCtrl.returnUserlessShare() !== "") //userid heeft willen sharen, maar was niet ingelogd.
                {
                    postUserlessShare();
                }
                else {
                    $location.path(data.redirect);
                }
            });
        };

        //Moet nog naar een service omgezet worden
        $scope.register = function () {
            $http.post(window.location.hostname+':3000/auth/register', {
                username: $scope.username,
                password: $scope.password,
                email: $scope.email
            }).success(function (data) {
                $scope.error = data.error;
                if (shareVarsBetweenCtrl.returnUserlessShare() !== undefined && shareVarsBetweenCtrl.returnUserlessShare() !== "") //userid heeft willen sharen, maar was niet ingelogd.
                {
                    postUserlessShare();
                }
                else {
                    $location.path(data.redirect);
                }
            });
        };
    };

    angular.module("geofeelings").controller("loginController", ["$scope", "$http", "$location", "shareVarsBetweenCtrl", "shareService", "profileService", loginController]);
})();
/**
 * Created by Jonatan on 21/11/2015.
 */

(function () {
    "use strict";

    var mainController = function ($scope, googleMapsService, shareService, profileService, $location, $routeParams) {


        var socket = io.connect(window.location.host+":3001");
        $scope.chatMessages = []; 


        $scope.init = function () {
            profileService.getUser(function (err, userData) { //zend je id naar de server om te zeggen dat je er bent en welk socketid je hebt
                if (!err) {
                    if (userData.redirect) {
                        //userid niet logged in, nog toevoegen dat hij zen id stuurt bij inloggen!
                    } else {
                        socket.emit("loginMessage", userData.id);
                    }
                } else {
                    console.log("error while getting user: " + err);
                }
            });
        };

        socket.on("sharePostedNotify", function (sharedata) {
            googleMapsService.showOnePostMarker(sharedata);
        });

        socket.on("chatMessage", function (data) { //ontvangen bericht
            $scope.chatMessages.push({text: data.text, sender: data.senderUsername, cssClass: "other"}); //pushen naar scope om chatbubble te tonen
            $scope.$apply(); //dit zorgt ervoor dat de chatbubbles er direct komen, niet verplaatsen!
        });

        $scope.sendChatMsgToServer = function () { //verzenden bericht
            var inputtext = document.getElementById("inputTextChat");
            if (inputtext.value !== "") {
                profileService.getUser(function (err, userData) {
                    if (!err) {
                        if (userData.redirect) { //user is nog niet ingelogd bij het chatten
                            shareVarsBetweenCtrl.setExtraLoginInfo("You need to be logged in to chat.");
                            $location.path(userData.redirect);
                        } else {

                            var messageObj = {
                                text: inputtext.value,
                                sender: userData.id,
                                receiver: $routeParams.param,
                                senderUsername: userData.username
                            };
                            socket.emit("chatMessage", messageObj);
                            $scope.chatMessages.push({
                                text: inputtext.value,
                                sender: userData.username,
                                cssClass: "me"
                            }); //pushen naar scope om chatbubble te tonen
                            inputtext.value = "";
                        }
                    } else {
                        console.log("error while getting user: " + err);
                    }
                });
            }
        };

        //chat einde

        shareService.getAllShares(function (err, shares) {
            if (!err) {
                googleMapsService.showLocationOnMap();
                $scope.shares = shares;
                $scope.timelapse = 0;
                $scope.timestamp = "last hour";
            } else {
                throw new ShareServiceException(err);
            }
        });

        $scope.$watch("timelapse", function() {
            if($scope.timelapse == 100) {
                $scope.timestamp = "All time";
                googleMapsService.removeMarkers();
                googleMapsService.showAllMarkers(filterSharesOnTime("all"));
            } else if($scope.timelapse == 80) {
                $scope.timestamp = "Last year";
                googleMapsService.removeMarkers();
                googleMapsService.showAllMarkers(filterSharesOnTime("year"));
            } else if($scope.timelapse == 60) {
                $scope.timestamp = "Last month";
                googleMapsService.removeMarkers();
                googleMapsService.showAllMarkers(filterSharesOnTime("month"));
            } else if($scope.timelapse == 40) {
                $scope.timestamp = "Last week";
                googleMapsService.removeMarkers();
                googleMapsService.showAllMarkers(filterSharesOnTime("week"));
            } else if($scope.timelapse == 20) {
                $scope.timestamp = "Last day";
                googleMapsService.removeMarkers();
                googleMapsService.showAllMarkers(filterSharesOnTime("day"));
            } else if($scope.timelapse === 0) {
                $scope.timestamp = "last hour";
                googleMapsService.removeMarkers();
                googleMapsService.showAllMarkers(filterSharesOnTime("hour"));
            }
        });

        var filterSharesOnTime = function(time) {
            var shares = [];

            switch (time) {
                case "all":
                    return $scope.shares;
                case "year":
                    angular.forEach($scope.shares, function(share) {
                        console.log(new Date().getYear() - new Date(share.time).getYear());
                        if((new Date().getTime() - new Date(share.time).getTime()) <= ((360000 * 24) * 365))
                            shares.push(share);
                    });
                    return shares;
                case "month":
                    angular.forEach($scope.shares, function(share) {
                        if((new Date().getTime() - new Date(share.time).getTime()) <= ((360000 * 24) * 31))
                            shares.push(share);
                    });
                    return shares;
                case "week":
                    angular.forEach($scope.shares, function(share) {
                        if((new Date().getTime() - new Date(share.time).getTime()) <= ((360000 * 24) * 7))
                            shares.push(share);
                    });
                    return shares;
                case "day":
                    angular.forEach($scope.shares, function(share) {
                        if((new Date().getTime() - new Date(share.time).getTime()) <= (360000 * 24))
                            shares.push(share);
                    });
                    return shares;
                case "hour":
                    angular.forEach($scope.shares, function(share) {
                        if((new Date().getTime() - new Date(share.time).getTime()) <= 360000)
                            shares.push(share);
                    });
                    return shares;
            }
        };
    };
    angular.module("geofeelings").controller("mainController", ["$scope", "googleMapsService", "shareService", "profileService", "$location", "$routeParams", mainController]);
})();
/**
 * Created by Jonatan on 25/11/2015.
 */


(function () {
    "use strict";

    var searchController = function ($scope, userService, eventService,profileService,shareVarsBetweenCtrl,$location) {

        $scope.searchModel = null;

        $scope.searchOnSubmit = function (formObj) {
            if ($scope.searchModel.length > 0) {
                searchNow();
            }
        };
        $scope.searchOnKeyPress = function () {
            if ($scope.searchModel !== null) {
                searchNow();
            }
        };

        $scope.filterSearchResults = function (i) {
            if ($scope.searchModel === "") {
                return false;
            }

            if (i.title.toLowerCase().indexOf($scope.searchModel.toLocaleLowerCase()) >= 0) {
                return true;
            }
            if (i.subtitle !== undefined) {
                if (i.subtitle.toLowerCase().indexOf($scope.searchModel.toLocaleLowerCase()) >= 0) {
                    return true;
                }
            }

            return false;
        };

        var searchNow = function () {
            $scope.maxResExceeded = false;

            profileService.getUser(function (err, userData) {
                if (!err) {
                    if (userData.redirect) { //user is nog niet ingelogd bij het sharen
                        shareVarsBetweenCtrl.setExtraLoginInfo("You need to login before using the search funtion.");
                        $location.path(userData.redirect);

                    } else {
                        userService.getAllUsers(function (err, results) {
                            if (err) {
                                console.log("error:" + err);
                            }
                            else {
                                var visibleres = [];
                                var i = 0, max = 5;
                                angular.forEach(results, function (res) {
                                    if (i < max) {
                                        visibleres.push(res);
                                        i++;
                                    }
                                });
                                $scope.searchResultsUsers = visibleres;
                            }
                        });

                        eventService.getAllEvents(function (err, results) {
                            if (err) {
                                console.log("error:" + err);
                            }
                            else {
                                var visibleres = [];
                                var i = 0, max = 5;
                                angular.forEach(results, function (res) {
                                    if (i < max) {
                                        visibleres.push(res);
                                        i++;
                                    }
                                });
                                $scope.searchResultsEvents = visibleres;
                            }
                        });
                    }
                } else {
                    console.log("error while getting user: " + err);
                }
            });
        };
    };

    angular.module("geofeelings").controller("searchController", ["$scope", "userService", "eventService","profileService","shareVarsBetweenCtrl","$location", searchController]);
})();
/**
 * Created by Jonatan on 21/12/2015.
 */

(function () {
    "use strict";

    var socket = io.connect(window.location.host+":3001");

    var meController = function ($scope, $http, $location, $sce, profileService, shareService) {
        profileService.getUser(function (err, user) {
            if (!err) {
                if (user.redirect) {
                    $location.path(user.redirect);
                } else {
                    $scope.user = user;
                    if(user.address) {
                        $scope.user.address1 = splitAddress(user.address, 0);
                        $scope.user.address2 = splitAddress(user.address, 1);
                    }

                    if(!user.age) {
                        $scope.user.age = new Date();
                    }

                    shareService.getSharesByUserId(user.id, function (err, shares) {
                        if(!err) {
                            if(shares.redirect) {
                                $location.path(shares.redirect);
                            } else {
                                if(shares.length > 0) {
                                    $scope.sharesforprofile = shares;
                                } else {
                                    $scope.noSharesForUser = "<div>You have no shares yet, go share one <a href='#/intro'>here</a></div>";
                                }
                            }
                        } else {
                            throw new ShareServiceException(err);
                        }
                    });
                }
            } else {
                throw new ProfileServiceException(err);
            }
        });

        $scope.save = function (user) {
            user.address = makeAddress(user.address1, user.address2);
            profileService.saveUser(user, function(err, data) {
                if(!err) {
                    if (data.redirect) {
                        $location.path(data.redirect);
                    } else if(data.error) {
                        $scope.errorMe = data.error;
                    } else {
                        $scope.user = data;
                        $scope.user.address1 = splitAddress(data.address, 0);
                        $scope.user.address2 = splitAddress(data.address, 1);
                    }
                } else {
                    if(err === "ZERO_RESULTS") {
                        $scope.errorMe = "No address found! Street & Number and Zip & City are required! Make sure ther is a space between your input and no komma(,)";
                    } else {
                        $scope.errorMe = "Something went wrong, try again later!";
                    }
                }
            });
        };

        $scope.logout = function () {


            profileService.getUser(function (err, userData) { //zend je id naar de server om te zeggen dat je weggaat en niet meer wilt chatten
                if (!err) {
                    if (userData.redirect) {
                        //userid niet logged in, nog toevoegen dat hij zen id stuurt bij inloggen!
                    } else {
                        socket.emit("logoutMessage", userData.id);
                    }
                } else {
                    console.log("error while getting userid: " + err);
                }
            });

            profileService.logout().then(function (data) {
                $location.path(data);
            });
        };

        $scope.renderHtml = function(html) {
            return $sce.trustAsHtml(html);
        };

        $scope.getShareInfo = function(share) {
            if(share.event) {
                return share.event.eventname;
            } else {
                return share.address;
            }
        };

        $scope.getShareImage = function(share) {
            if(share.event) {
                return share.event.eventimage;
            } else {
                return "http://student.howest.be/jonatan.michiels/geofeelings/assets/location.png";
            }
        };

        var splitAddress = function (address, part) {
            var split = address.split(",");
            return split[part];
        };

        var makeAddress = function (address1, address2) {
            return address1 + "," + address2;
        };
    };

    angular.module("geofeelings").controller("meController", ["$scope", "$http", "$location", "$sce", "profileService", "shareService", meController]);
})();
/**
 * Created by Jonatan on 1/12/2015.
 */

(function () {
    "use strict";

    var userController = function ($scope, $location, userService, shareService, $routeParams) {

        $scope.init = function () {
            var userid = $routeParams.param;
            userService.searchUserFromId(userid).then(userFoundWithId);

            shareService.getSharesByUserId(userid, function (err, shares) {
                if (!err) {
                    $scope.shareFoundWithUserId = shares;
                    console.log($scope.shareFoundWithUserId);
                    var feelingImages = ["depressed", "sad", "common", "happy", "excited"];
                    angular.forEach(shares, function (share) {
                        share.moodImageSource = "./assets/" + feelingImages[giveFeelingsImageArrayNumber(share)] + ".png";
                        $scope.marker = new google.maps.Marker({
                            position: {lat: share.lat, lng: share.lng},
                            map: $scope.map,
                            icon: share.moodImageSource
                        });
                    });
                } else {
                    console.log("> error in shareService: " + err);
                }
            });
        };

        var userFoundWithId = function (res) {
            $scope.userfoundwithid = res;

            if (res.lat !== undefined && res.lat !== undefined) {
                $scope.map.setCenter(new google.maps.LatLng(res.lat, res.lng));
                if ($scope.marker !== undefined) {
                    $scope.marker.setMap(null); //verwijdert alle markers eerst
                }
                $scope.marker = new google.maps.Marker({
                    position: {lat: res.lat, lng: res.lng},
                    map: $scope.map,
                    icon: $scope.image
                });
            }
        };

        var giveFeelingsImageArrayNumber = function (share) {
            if (share.mood > 80) {
                return 4;
            }
            else {
                return Math.round(share.mood / 20);
            }
        };
    };

    angular.module("geofeelings").controller("userController", ["$scope", "$location", "userService", "shareService", "$routeParams", userController]);
})
();
/**
 * Created by Jonatan on 28/12/2015.
 */

var eventService = function ($http, googleMapsService) {
    "use strict";

    //private

    //public
    return {

        getAllEvents: function (cb) {
            $http.get("/api/event").success(function (data) {
                if (data.redirect) {
                    cb(null, data);
                } else {

                    var eventsFound = [];
                    angular.forEach(data, function (searchR) {
                        var newSR = new SearchResult(searchR.eventname, searchR.address, searchR._id,"event");
                        eventsFound.push(newSR);
                    });
                    cb(null, eventsFound);
                }
            }).error(function (error) {
                cb(error, null);
            });
        },

        getEvents: function (cb) {
            $http.get("/api/event").success(function (data) {
                if(data.redirect) {
                    cb(null, data);
                } else {
                    var events = [];
                    angular.forEach(data, function(event) {
                        events.push(new GfEvent(event._id, event.eventname, event.eventimage, event.authorid, event.from, event.until, event.lat, event.lng, event.address));
                    });
                    cb(null, events);
                }
            }).error(function (error) {
                cb(error, null);
            });
        },

        getEventById: function (eventid, cb) {
            $http.get("/api/event/" + eventid).success(function (data) {
                if (data.redirect) {
                    cb(null, data);
                } else {
                    if (data.address) {
                        cb(null, new GfEvent(data._id, data.eventname, data.eventimage, data.authorid, new Date(data.from), new Date(data.until), data.lat, data.lng, data.address));
                    } else {
                        googleMapsService.convertCoordinatesToAdress(data.lat, data.lng, function (err, address) {
                            if (!err) {
                                cb(null, cb(null, new GfEvent(data._id, data.eventname, data.eventimage, data.authorid, new Date(data.from), new Date(data.until), data.lat, data.lng, address)));
                            } else {
                                cb(err, null);
                            }
                        });
                    }
                }
            }).error(function (error) {
                cb(error, null);
            });
        },

        getEventByIdForShare: function (eventid, cb) {
            $http.get("/api/event/" + eventid).success(function(data) {
                cb(null, new GfEvent(data._id, data.eventname, data.eventimage, null, null, null, null, null, null));
            }).error(function (error) {
                cb(error, null);
            });
        },

        postEvent: function (data, cb) {
            googleMapsService.convertAdressToCoordinates(data.address, function (err, coord) {
                if (!err) {
                    data.lat = coord.lat();
                    data.lng = coord.lng();

                    $http.post("/api/event", new GfEvent(data._id, data.eventname, data.eventimage, data.authorid, new Date(data.from), new Date(data.until), data.lat, data.lng, data.address)).success(function (response) {
                        cb(null, response);
                    }).error(function (error) {
                        cb(error, null);
                    });
                } else {
                    cb(err, null);
                }
            });
        },

        updateEvent: function (data, cb) {
            googleMapsService.convertAdressToCoordinates(data.address, function (err, coord) {
                if (!err) {
                    data.lat = coord.lat();
                    data.lng = coord.lng();

                    $http.put("/api/event/" + data.id, data).success(function (response) {
                        cb(null, new GfEvent(response._id, response.eventname, response.eventimage, response.authorid, new Date(response.from), new Date(response.until), response.lat, response.lng, response.address));
                    }).error(function (error) {
                        cb(error, null);
                    });
                } else {
                    cb(err, null);
                }
            });
        },

        deleteEvent: function (event, cb) {
            $http.delete("/api/event/" + event.id).success(function (data) {
                cb(null, data);
            }).error(function (error) {
                cb(error, null);
            });
        }
    };
};

angular.module("geofeelings").factory("eventService", ["$http", "googleMapsService", eventService]);
/**
 * Created by Jonatan on 22/12/2015.
 */

// https://developers.google.com/maps/documentation/geocoding/intro?csw=1#Geocoding
// Dit gebruiken om adressen te vertalen naar lat en lng of omgekeerd
// Waarom? => google maps werkt met lat en lng, wordt zo opgeslaan in de database

var googleMapsService = function () {
    "use strict";
    // private
    var mapoptions = {
        zoom: 10,
        mapTypeId: google.maps.MapTypeId.ROADMAP,
        disableDefaultUI: true
    };
    var geocoder = new google.maps.Geocoder();
    var map = new google.maps.Map(document.querySelector("#map"), mapoptions);
    var markers = [];

    var chooseIcon = function (mood) {
        var url = "http://student.howest.be/jonatan.michiels/geofeelings/assets/";
        if (mood <= 20) {
            return url += "depressed.png";
        } else if (mood > 20 && mood <= 40) {
            return url += "sad.png";
        } else if (mood > 40 && mood <= 60) {
            return url += "common.png";
        } else if (mood > 60 && mood <= 80) {
            return url += "happy.png";
        } else {
            return url += "excited.png";
        }
    };

    //public
    return {
        showLocationOnMap: function () {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    map.setCenter(new google.maps.LatLng(position.coords.latitude, position.coords.longitude));
                    var marker = new google.maps.Marker({
                        position: map.getCenter(),
                        map: map,
                        icon: "http://student.howest.be/jonatan.michiels/geofeelings/assets/location_now.png"
                    });
                    markers.push(marker);
                });
            } else {
                // Throw map exception
            }
        },

        removeMarkers: function () {
            for (var i = 0; i < markers.length; i++) {
                markers[i].setMap(null);
            }
        },

        showOnePostMarker: function (data) {
            console.log(data);
            var marker = new google.maps.Marker({
                position: new google.maps.LatLng(data.lat, data.lng),
                map: map,
                icon: chooseIcon(data.mood)
            });

            if (!data.reason) {
                data.reason = "Random post with no reason!";
            }

            if (!data.event) {
                data.event.eventname = "No event data";
            }

            var infoWindow = new google.maps.InfoWindow();
            var content = "<h4 class='infowindowstyle'> Share details </h4>" +
                "<p class='infowindowstyle'> Time: <span>" + new Date(data.time) +
                "<p class='infowindowstyle'> Mood: <span>" + data.mood + "%</span></p>" +
                "<p class='infowindowstyle'> Reason: <span>" + data.reason + "</span></p>" + "</span></p>" +
                "<p class='infowindowstyle'> User: <span>" + data.user.username + "</span></p>" +
                "<p class='infowindowstyle'> Address: <span>" + data.address + "</span></p>" +
                "<p class='infowindowstyle'> Event: <span>" + data.event.eventname + "</span></p>";

            google.maps.event.addListener(marker, "click", (function (marker, content, infoWindow) {
                return function () {
                    infoWindow.setContent(content);
                    infoWindow.open(map, marker);
                };
            })(marker, content, infoWindow));

        },

        showAllMarkers: function (data) {
            var marker, i;
            for (i = 0; i < data.length; i++) {
                marker = new google.maps.Marker({
                    position: new google.maps.LatLng(data[i].lat, data[i].lng),
                    map: map,
                    icon: chooseIcon(data[i].mood)
                });

                if (!data[i].reason) {
                    data[i].reason = "Random post with no reason!";
                }

                if (!data[i].event.eventname) {
                    data[i].event.eventname = "No event data";
                }

                var infoWindow = new google.maps.InfoWindow();
                var content = "<h4 class='infowindowstyle'> Share details </h4>" +
                    "<p class='infowindowstyle'> Time: <span>" + new Date(data[i].time) +
                    "<p class='infowindowstyle'> Mood: <span>" + data[i].mood + "%</span></p>" +
                    "<p class='infowindowstyle'> Reason: <span>" + data[i].reason + "</span></p>" + "</span></p>" +
                    "<p class='infowindowstyle'> User: <span>" + data[i].user.username + "</span></p>" +
                    "<p class='infowindowstyle'> Address: <span>" + data[i].address + "</span></p>" +
                    "<p class='infowindowstyle'> Event: <span>" + data[i].event.eventname + "</span></p>";

                markers.push(marker);
                google.maps.event.addListener(marker, "click", (function (marker, content, infoWindow) {
                    return function () {
                        infoWindow.setContent(content);
                        infoWindow.open(map, marker);
                    };
                })(marker, content, infoWindow));
            }
        },

        convertAdressToCoordinates: function (address, cb) {
            geocoder.geocode({address: address}, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    cb(null, results[0].geometry.location);
                } else {
                    cb(status, null);
                }
            });
        },

        convertCoordinatesToAdress: function (lat, lng, cb) {
            var location = new google.maps.LatLng(lat, lng);
            geocoder.geocode({latLng: location}, function (results, status) {
                if (status == google.maps.GeocoderStatus.OK) {
                    cb(null, results[0].formatted_address);
                } else if (status == google.maps.GeocoderStatus.OVER_QUERY_LIMIT) {
                    setTimeout(function () {
                        cb(null, results[0].formatted_address);
                    }, 200);
                } else {
                    cb(status, null);
                }
            });
        }
    };
};

angular.module("geofeelings").factory("googleMapsService", [googleMapsService]);
/**
 * Created by Jonatan on 27/12/2015.
 */

var profileService = function ($http, googleMapsService) {
    "use strict";
    // private

    //public
    return {
        getUser: function (cb) {
            $http.get("/auth/user").success(function (data) {
                if (data.redirect) {
                    cb(null, data);
                } else {
                    cb(null, new GfUser(data._id, data.username, data.email, data.userimage, new Date(data.age), data.lat, data.lng, data.address, data.chat, data.admin));
                }
            }).error(function (error) {
                cb(error, null);
            });
        },

        saveUser: function (user, cb) {
            googleMapsService.convertAdressToCoordinates(user.address, function (err, coord) {
                if (!err) {
                    user.lat = coord.lat();
                    user.lng = coord.lng();

                    $http.put("/api/user/" + user.id, user).success(function (data) {
                        if (data.redirect) {
                            cb(null, data);
                        } else {
                            cb(null, new GfUser(data._id, data.username, data.email, data.userimage, new Date(data.age), data.lat, data.lng, data.address, data.chat, data.admin));
                        }
                    }).error(function (error) {
                        cb(error, null);
                    });
                } else {
                    cb(err, null);
                }
            });
        },

        logout: function () {
            return $http.get("/auth/logout").then(function (data) {

                return data;
            });
        }
    };
};

angular.module("geofeelings").factory("profileService", ["$http", "googleMapsService", profileService]);
/**
 * Created by Lienert on 23/12/2015.
 */

/**
 * OPMERKING VOOR LIENERT!!!!
 * post share zal niet werken
 * implementeer googleService
 * voorbeeld kan je vinden in profileservice (put functie)
 * Groetjes Jonatan
 */


var shareService = function ($http, $q, $location, googleMapsService, eventService, userService, shareVarsBetweenCtrl) {
    "use strict";

    //private
    var makeAddress = function (address) {
        if (address) {
            var split = address.split(",");
            return split[0] + ", " + split[1];
        } else {
            return null;
        }
    };

    var postShare = function (data) {
        $http({
            url: window.location.host+':3000/api/share',
            method: 'POST',
            data: data
        }).success(function (serverData) {
            shareVarsBetweenCtrl.setProperty(serverData); //data kunnen doorgeven aan intro_sharedController
            $location.path("intro_shared");
        });
    };

    //public
    return {
        postShare: postShare,

        postShareAsync: function (data, cb) {
            if (data.address) {
                $http.post("/api/share", data).success(function (response) {
                    if (response.redirect) {
                        cb(null, response);
                    } else {
                        cb(null, new GfShare(data._id, data.userid, data.eventid, data.time, data.mood, data.lat, data.lng, makeAddress(data.address), data.reason));
                    }
                }).error(function (error) {
                    cb(error, null);
                });
            } else {
                googleMapsService.convertCoordinatesToAdress(data.lat, data.lng, function (err, address) {
                    if (!err) {
                        $http.post("/api/share", data).success(function (response) {
                            if (response.redirect) {
                                cb(null, response);
                            } else {
                                cb(null, new GfShare(data._id, data.userid, data.eventid, data.time, data.mood, data.lat, data.lng, makeAddress(address), data.reason));
                            }
                        }).error(function (error) {
                            cb(error, null);
                        });
                    } else {
                        cb(err, null);
                    }
                });
            }
        },

        getSharesByUserId: function (userid, cb) {
            $http.get("/api/share/user/" + userid).success(function (data) {
                if (data.redirect) {
                    cb(null, data);
                } else {
                    var shares = [];

                    angular.forEach(data, function (share) {
                        userService.getUserByIdForShare(share.userid, function(err, user) {
                            if(!err) {
                                share.user = user;
                                eventService.getEventByIdForShare(share.eventid, function(err, event) {
                                    if(!err) {
                                        share.event = event;
                                        shares.push(new GfShareExtended(share._id, share.user, share.event, share.time, share.mood, share.lat, share.lng, makeAddress(share.address), share.reason));

                                        if(data.length === shares.length) {
                                            cb(null, shares);
                                        }
                                    }
                                });
                            }
                        });
                    });
                }
            }).error(function (error) {
                cb(error, null);
            });
        },

        getSharesByEventId: function (eventid, cb) {
            $http.get("/api/share/event/" + eventid).success(function (data) {
                if (data.redirect) {
                    cb(null, data);
                } else {
                    var shares = [];
                    angular.forEach(data, function (share) {
                        userService.getUserByIdForShare(share.userid, function(err, user) {
                            if(!err) {
                                share.user = user;
                                eventService.getEventByIdForShare(share.eventid, function(err, event) {
                                    if(!err) {
                                        share.event = event;
                                        shares.push(new GfShareExtended(share._id, share.user, share.event, share.time, share.mood, share.lat, share.lng, makeAddress(share.address), share.reason));

                                        if(data.length === shares.length) {
                                            cb(null, shares);
                                        }
                                    }
                                });
                            }
                        });
                    });
                }
            }).error(function (error) {
                cb(error, null);
            });
        },

        getAllShares: function (cb) {
            $http.get("/api/share").success(function (data) {
                var shares = [];
                angular.forEach(data, function (share) {
                    userService.getUserByIdForShare(share.userid, function(err, user) {
                        if(!err) {
                            share.user = user;
                            eventService.getEventByIdForShare(share.eventid, function(err, event) {
                                if(!err) {
                                    share.event = event;
                                    shares.push(new GfShareExtended(share._id, share.user, share.event, share.time, share.mood, share.lat, share.lng, makeAddress(share.address), share.reason));

                                    if(data.length === shares.length) {
                                        cb(null, shares);
                                    }
                                }
                            });
                        }
                    });
                });
            }).error(function (error) {
                cb(error, null);
            });
        },

        deleteShare: function (share, cb) {
            $http.delete("/api/share/" + share.id).success(function (data) {
                cb(null, data);
            }).error(function (error) {
                cb(error, null);
            });
        }
    };
};
angular.module("geofeelings").factory("shareService", ["$http", "$q", "$location", "googleMapsService", "eventService", "userService", "shareVarsBetweenCtrl", shareService]);

/**
 * Created by liene on 28/12/2015.
 */


var shareVarsBetweenCtrl = function () {
    "use strict";

    //private
    var property;
    var userlessShare;
    var ExtraLoginInfo;
    //public
    return {

        getProperty: function () {
            return property;
        },

        setProperty: function (value) {
            property = value;
        },

        setExtraLoginInfo: function (data) {
            ExtraLoginInfo = data;
        },
        getExtraLoginInfo: function () {
            return ExtraLoginInfo;
        },

        saveUserlessShare: function (data) {
            userlessShare = data;
        },
        returnUserlessShare: function () {
            return userlessShare;
        }
    };
};

angular.module("geofeelings").factory("shareVarsBetweenCtrl", [shareVarsBetweenCtrl]);
(function () {
    "use strict";

    var userService = function ($http) {

        var getAllUsers = function (cb) {
            $http.get("/api/user").success(function (data) {
                if (data.redirect) {
                    cb(null, data);
                } else {

                var arSearchResults = [];
                    angular.forEach(data, function (searchR) {
                        var newSR = new SearchResult(searchR.username, searchR.email, searchR._id,"user");
                        arSearchResults.push(newSR);
                    });
                    cb(null, arSearchResults);
                }
            }).error(function (error) {
                cb(error, null);
            });
        };


        var searchUserFromId = function (searchString) {
            var url = window.location.host+':3000/api/user/' + searchString;
            return $http.get(url).then(function (response) {
                return new GfUser(
                    response.data._id,
                    response.data.username,
                    response.data.email,
                    response.data.userimage,
                    response.data.age,
                    response.data.lat,
                    response.data.lng,
                    response.data.address,
                    response.data.chat,
                    response.data.admin
                );

            });
        };

        return {
            getAllUsers: getAllUsers,
            searchUserFromId: searchUserFromId,
            getUserByIdForShare: function(userid, cb) {
                $http.get("/api/user/" + userid).success(function(data) {
                    cb(null, new GfUser(data._id, data.username, null, data.userimage, null, null, null, null, null, null));
                }).error(function (error) {
                    cb(error, null);
                });
            }
        };
    };
    angular.module("geofeelings").factory("userService", ["$http", userService]);
})();
/**
 * Created by Jonatan on 28/12/2015.
 */

function GfEvent(id, eventname, eventimage, authorid, from, until, lat, lng, address) {
    this.id = id;
    this.eventname = eventname;
    this.eventimage = eventimage;
    this.authorid = authorid;
    this.from = from;
    this.until = until;
    this.lat = lat;
    this.lng = lng;
    this.address = address;
}

GfShare.prototype.toString = function () {
    return this.eventname;
};
function GfShare(id, userid, eventid, time, mood, lat, lng, address, reason) {
    this.id = id;
    this.userid = userid;
    this.eventid = eventid;
    this.time = time;
    this.mood = mood;
    this.lat = lat;
    this.lng = lng;
    this.address = address;
    this.reason = reason;
}

GfShare.prototype.toString = function () {
    return this.userid + " (" + this.time + ")";
};

/**
 * Created by Jonatan on 31/12/2015.
 */

function GfShareExtended(id, user, event, time, mood, lat, lng, address, reason) {
    this.id = id;
    this.user = user;
    this.event = event;
    this.time = time;
    this.mood = mood;
    this.lat = lat;
    this.lng = lng;
    this.address = address;
    this.reason = reason;
}

GfShare.prototype.toString = function () {
    return this.userid + " (" + this.time + ")";
};
function GfUser(id, username, email, userimage, age, lat, lng, address, chat, admin) {
    this.id = id;
    this.username = username;
    this.email = email;
    this.userimage = userimage;
    this.age = age;
    this.lat = lat;
    this.lng = lng;
    this.address = address;
    this.chat = chat;
    this.admin = admin;
}

GfUser.prototype.toString = function () {
    return this.username;
};

function SearchResult(title, subtitle, id, resultSort) {
    this.title = title;
    this.subtitle = subtitle;
    this.id = id;
    this.resultSort = resultSort;
}
SearchResult.prototype.toString = function () {
    return this.title;
};

/**
 * Created by Jonatan on 31/12/2015.
 */

function EventServiceException(message) {
    this.name = "EventServiceException";
    this.message = message;
    this.stack = (new Error()).stack;
}

// IE9

EventServiceException.prototype = Object.create(Error.prototype);
EventServiceException.prototype.constructor = EventServiceException;
/**
 * Created by Jonatan on 31/12/2015.
 */

function ProfileServiceException(message) {
    this.name = "ProfileServiceException";
    this.message = message;
    this.stack = (new Error()).stack;
}

// IE9

ProfileServiceException.prototype = Object.create(Error.prototype);
ProfileServiceException.prototype.constructor = ProfileServiceException;
/**
 * Created by Jonatan on 31/12/2015.
 */

function ShareServiceException(message) {
    this.name = "ShareServiceException";
    this.message = message;
    this.stack = (new Error()).stack;
}

// IE9

ShareServiceException.prototype = Object.create(Error.prototype);
ShareServiceException.prototype.constructor = ShareServiceException;
//# sourceMappingURL=data:application/json;base64,
